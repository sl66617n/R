next
}
}
# Specify and fit the GARCH model
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(final.order[1], final.order[3]), include.mean=T),
distribution.model="sged"
)
fit = tryCatch(
ugarchfit(
spec, spReturnsOffset, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# If the GARCH model does not converge, set the direction to "long" else
# choose the correct forecast direction based on the returns prediction
# Output the results to the screen and the forecasts vector
if(is(fit, "warning")) {
forecasts[d+1] = paste(index(spReturnsOffset[windowLength]), 1, sep=",")
print(paste(index(spReturnsOffset[windowLength]), 1, sep=","))
} else {
fore = ugarchforecast(fit, n.ahead=1)
ind = fore@forecast$seriesFor
forecasts[d+1] = paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=",")
print(paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=","))
}
}
spIntersect = merge( spArimaGarch[,1], spReturns, all=F )
library("fracdiff", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
spIntersect = merge( spArimaGarch[,1], spReturns, all=F )
spIntersect = merge(spArimaGarch[,1], spReturns, all=F)
spArimaGarch = as.xts(
read.zoo(
file="/Users/sijialiang/Desktop/forecasts_new.csv", format="%Y-%m-%d", header=F, sep=","
)
)
spArimaGarch = as.xts(
read.zoo(file="/Users/sijialiang/Desktop/forecasts_new.csv", format="%Y-%m-%d", header=F, sep=","
)
)
write.csv(forecasts, file="forecasts.csv", row.names=FALSE)
spArimaGarch = as.xts(
read.zoo(file="/Users/sijialiang/Desktop/forecasts_new.csv", format="%Y-%m-%d", header=F, sep=","
)
)
spIntersect = merge(spArimaGarch[,1], spReturns, all=F)
spArimaGarchReturns = spIntersect[,1] * spIntersect[,2]
spArimaGarchCurve = log( cumprod( 1 + spArimaGarchReturns ) )
spBuyHoldCurve = log( cumprod( 1 + spIntersect[,2] ) )
spCombinedCurve = merge( spArimaGarchCurve, spBuyHoldCurve, all=F )
xyplot(
spCombinedCurve,
superpose=T,
col=c("darkred", "darkblue"),
lwd=2,
key=list(
text=list(
c("ARIMA+GARCH", "Buy & Hold")
),
lines=list(
lwd=2, col=c("darkred", "darkblue")
)
)
)
View(spArimaGarchReturns)
View(spArimaGarchReturns)
library(quantmod)
library(lattice)
library(timeSeries)
library(rugarch)
getSymbols("^GSPC", from="2010-01-01")
spReturns = diff(log(Cl(GSPC)))
spReturns[as.character(head(index(Cl(GSPC)),1))] = 0
windowLength = 500
foreLength = length(spReturns) - windowLength
forecasts <- vector(mode="character", length=foreLength)
for (d in 0:foreLength) {
# Obtain the S&P500 rolling window for this day
spReturnsOffset = spReturns[(1+d):(windowLength+d)]
# Fit the ARIMA model
final.aic <- Inf
final.order <- c(0,0,0)
for (p in 0:5) for (q in 0:5) {
if ( p == 0 && q == 0) {
next
}
arimaFit = tryCatch( arima(spReturnsOffset, order=c(p, 0, q)),
error=function( err ) FALSE,
warning=function( err ) FALSE )
if( !is.logical( arimaFit ) ) {
current.aic <- AIC(arimaFit)
if (current.aic < final.aic) {
final.aic <- current.aic
final.order <- c(p, 0, q)
final.arima <- arima(spReturnsOffset, order=final.order)
}
} else {
next
}
}
# Specify and fit the GARCH model
spec = ugarchspec(
variance.model=list(garchOrder=c(1,1)),
mean.model=list(armaOrder=c(final.order[1], final.order[3]), include.mean=T),
distribution.model="sged"
)
fit = tryCatch(
ugarchfit(
spec, spReturnsOffset, solver = 'hybrid'
), error=function(e) e, warning=function(w) w
)
# If the GARCH model does not converge, set the direction to "long" else
# choose the correct forecast direction based on the returns prediction
# Output the results to the screen and the forecasts vector
if(is(fit, "warning")) {
forecasts[d+1] = paste(index(spReturnsOffset[windowLength]), 1, sep=",")
print(paste(index(spReturnsOffset[windowLength]), 1, sep=","))
} else {
fore = ugarchforecast(fit, n.ahead=1)
ind = fore@forecast$seriesFor
forecasts[d+1] = paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=",")
print(paste(colnames(ind), ifelse(ind[1] < 0, -1, 1), sep=","))
}
}
r
write.csv(forecasts, file="forecasts.csv", row.names=FALSE)
spArimaGarch = as.xts(
read.zoo(file="/Users/sijialiang/Desktop/forecasts_new.csv", format="%Y-%m-%d", header=F, sep=","
)
)
spIntersect = merge(spArimaGarch[,1], spReturns, all=F)
spArimaGarchReturns = spIntersect[,1] * spIntersect[,2]
spArimaGarchCurve = log( cumprod( 1 + spArimaGarchReturns ) )
spBuyHoldCurve = log( cumprod( 1 + spIntersect[,2] ) )
spCombinedCurve = merge( spArimaGarchCurve, spBuyHoldCurve, all=F )
xyplot(
spCombinedCurve,
superpose=T,
col=c("darkred", "darkblue"),
lwd=2,
key=list(
text=list(
c("ARIMA+GARCH", "Buy & Hold")
),
lines=list(
lwd=2, col=c("darkred", "darkblue")
)
)
)
library(Quandl)
library(glmnet)
library(dplyr)
install.packages('glmnet')
install.packages('Quandl')
install.packages('glmnet')
install.packages('dplyr')
install.packages("dplyr")
library(Quandl)
library(glmnet)
library(dplyr)
Quandl.api_key('tAyfv1zpWnyhmDsp91yv')
aapl <- Quandl("WIKI/AAPL", start_date="2009-01-01")
vix <- Quandl("CHRIS/CBOE_VX1", start_date="2009-01-01")
Quandl.api_key('tAyfv1zpWnyhmDsp91yv')
aapl <- Quandl("WIKI/AAPL", start_date="2009-01-01")
vix <- Quandl("CHRIS/CBOE_VX1", start_date="2009-01-01")
spy <- Quandl("CHRIS/CME_SP1", start_date="2009-01-01")
colnames(aapl)[12] <- "AdjClose"
aapl <- aapl[order(aapl$Date),]
aapl <- aapl %>% select(Date, AdjClose) %>% mutate(lpx = log(AdjClose), ret = c(NA,diff(lpx)), retLag1 = lag(ret, 1), retLag2 = lag(ret, 2), retLag3 = lag(ret, 3), retLag4 = lag(ret, 4), retLag5 = lag(ret, 5))
colnames(vix)[1] <- "Date"
vix <- vix[order(vix$Date), ]
vix <- vix %>% select(Date,Settle) %>% mutate(vixLpx = log(Settle), vixRet = c(NA,diff(vixLpx)), vixRetLag1 = lag(vixRet, 1), vixRetLag2 = lag(vixRet, 2), vixRetLag3 = lag(vixRet, 3), vixRetLag4 = lag(vixRet, 4), vixRetLag5 = lag(vixRet, 5))
spy <- spy[order(spy$Date), ]
spy <- spy %>% select(Date,Settle) %>% mutate(spyLpx = log(Settle), spyRet = c(NA,diff(spyLpx)), spyRetLag1 = lag(spyRet, 1), spyRetLag2 = lag(spyRet, 2), spyRetLag3 = lag(spyRet, 3), spyRetLag4 = lag(spyRet, 4), spyRetLag5 = lag(spyRet, 5))
data <- left_join(aapl, vix, by="Date")
data <- left_join(data, spy, by="Date")
data <- na.omit(data)
data <- data[,c(4,5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)]
y <- as.matrix(data[,4])
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
trainSize <- floor(0.8 * nrow(data))
data.train <- data[1:trainSize,]
x.train <- x[1:trainSize,]
x.test <- x[-(1:trainSize),]
y.train <- y[1:trainSize,]
y.test <- y[-(1:trainSize),]
scaledMeans <- colMeans(data.train)
scaledStd <- apply(data.train, 2, sd)
par(mfrow=c(3,5))
plot(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
y <- as.matrix(data[,4])
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
y <- as.matrix(data[,4])
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
trainSize <- floor(0.8 * nrow(data))
data.train <- data[1:trainSize,]
trainSize <- floor(0.8 * nrow(data))
data.train <- data[1:trainSize,]
x.train <- x[1:trainSize,]
x.test <- x[-(1:trainSize),]
y.train <- y[1:trainSize,]
y.test <- y[-(1:trainSize),]
scaledMeans <- colMeans(data.train)
scaledStd <- apply(data.train, 2, sd)
par(mfrow=c(3,5))
plot(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
plot(ret ~ retLag3, data=data.train)
plot(ret ~ retLag4, data=data.train)
plot.new(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
plot(ret ~ retLag3, data=data.train)
plot(ret ~ retLag4, data=data.train)
plot(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
plot(ret ~ retLag3, data=data.train)
par(mfrow=c(3,5))
plot(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
plot(ret ~ retLag3, data=data.train)
plot(ret ~ retLag4, data=data.train)
plot(ret ~ retLag5, data=data.train)
plot(ret ~ vixRetLag1, data=data.train)
plot(ret ~ vixRetLag2, data=data.train)
plot(ret ~ vixRetLag3, data=data.train)
plot(ret ~ vixRetLag4, data=data.train)
plot(ret ~ vixRetLag5, data=data.train)
plot(ret ~ spyRetLag1, data=data.train)
plot(ret ~ spyRetLag2, data=data.train)
plot(ret ~ spyRetLag3, data=data.train)
plot(ret ~ spyRetLag4, data=data.train)
plot(ret ~ spyRetLag5, data=data.train)
aapl.formula <- ret ~ retLag1 + retLag2 + retLag3 + retLag4 + retLag5 + vixRetLag1 + vixRetLag2 + vixRetLag3 + vixRetLag4 + vixRetLag5 + spyRetLag1 + spyRetLag2 + spyRetLag3 + spyRetLag4 + spyRetLag5
train.lm <- lm(aapl.formula, data=data.train)
summary(train.lm)
aapl.resid <- residuals(train.lm)
aapl.fitted <- fitted(train.lm)
par(mfrow=c(3,5))
plot(aapl.resid ~ retLag1, data=data.train)
plot(aapl.resid ~ retLag2, data=data.train)
plot(aapl.resid ~ retLag3, data=data.train)
plot(aapl.resid ~ retLag4, data=data.train)
plot(aapl.resid ~ retLag5, data=data.train)
plot(aapl.resid ~ vixRetLag1, data=data.train)
plot(aapl.resid ~ vixRetLag2, data=data.train)
plot(aapl.resid ~ vixRetLag3, data=data.train)
plot(aapl.resid ~ vixRetLag4, data=data.train)
plot(aapl.resid ~ vixRetLag5, data=data.train)
plot(aapl.resid ~ spyRetLag1, data=data.train)
plot(aapl.resid ~ spyRetLag2, data=data.train)
plot(aapl.resid ~ spyRetLag3, data=data.train)
plot(aapl.resid ~ spyRetLag4, data=data.train)
plot(aapl.resid ~ spyRetLag5, data=data.train)
par(mfrow=c(1,1))
plot(train.lm)
plot(fit.ridge, xvar="lambda")
foreLength <- length(y.test)
trainLength <- length(y.train)
tot <- 0
for (d in 0:(foreLength-1)) {
data.train <- data[(1+d):(trainLength+d), ]
#train.lm <- lm(aapl.formula, data=data.train)
train.lm <- glmnet(as.matrix(data.train[,c(2:16)]), as.matrix(data.train[,1]), family="gaussian", alpha=0, lambda=0.0005)
#forecast <- predict(train.lm, (data[trainLength+d+1,c(2:16)]))
forecast <- predict(train.lm, as.matrix(data[trainLength+d+1,c(2:16)]))
sqrErr <- (forecast - data[trainLength+d+1,1])^2
tot <- tot+sqrErr
}
tot/foreLength
aapl.formula <- ret ~ retLag1 + retLag2 + retLag3 + retLag4 + retLag5 + vixRetLag1
Quandl.api_key('tAyfv1zpWnyhmDsp91yv')
aapl <- Quandl("WIKI/AAPL", start_date="2009-01-01")
aapl <- Quandl("WIKI/AAPL", start_date="2009-01-01")
aapl
vix <- Quandl("CHRIS/CBOE_VX1", start_date="2009-01-01")
vix
spy
spy <- Quandl("CHRIS/CME_SP1", start_date="2009-01-01")
spy
colnames(aapl)[12] <- "AdjClose"
head(aapl)
colnames(aapl)[12]
aapl <- aapl[order(aapl$Date),]
aapl <- aapl %>% select(Date, AdjClose) %>% mutate(lpx = log(AdjClose), ret = c(NA,diff(lpx)),
retLag1 = lag(ret, 1), retLag2 = lag(ret, 2), retLag3 = lag(ret, 3), retLag4 = lag(ret, 4), retLag5 = lag(ret, 5))
colnames(vix)[1] <- "Date"
vix <- vix[order(vix$Date), ]
vix <- vix %>% select(Date,Settle) %>% mutate(vixLpx = log(Settle), vixRet = c(NA,diff(vixLpx)),
vixRetLag1 = lag(vixRet, 1), vixRetLag2 = lag(vixRet, 2), vixRetLag3 = lag(vixRet, 3), vixRetLag4 = lag(vixRet, 4),
vixRetLag5 = lag(vixRet, 5))
spy <- spy[order(spy$Date), ]
spy <- spy %>% select(Date,Settle) %>% mutate(spyLpx = log(Settle), spyRet = c(NA,diff(spyLpx)), spyRetLag1 = lag(spyRet, 1),
spyRetLag2 = lag(spyRet, 2), spyRetLag3 = lag(spyRet, 3), spyRetLag4 = lag(spyRet, 4), spyRetLag5 = lag(spyRet, 5))
data <- left_join(aapl, vix, by="Date")
data <- left_join(data, spy, by="Date")
data <- na.omit(data)
data <- data[,c(4,5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)]
y <- as.matrix(data[,4])
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
trainSize <- floor(0.8 * nrow(data))
data.train <- data[1:trainSize,]
x.train <- x[1:trainSize,]
x.test <- x[-(1:trainSize),]
y.train <- y[1:trainSize,]
y.test <- y[-(1:trainSize),]
scaledMeans <- colMeans(data.train)
scaledStd <- apply(data.train, 2, sd)
x <- as.matrix(data[,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
x <- as.matrix(data[ ,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
str(aapl)
data <- data[,c(4,5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)]
data <- data[,c(4:25)]
data <- data[,c(4,5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)]
x <- as.matrix(data[ ,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
trainSize <- floor(0.8 * nrow(data))
data.train <- data[1:trainSize,]
x.train <- x[1:trainSize,]
x.test <- x[-(1:trainSize),]
y.train <- y[1:trainSize,]
y.test <- y[-(1:trainSize),]
scaledMeans <- colMeans(data.train)
data <- data[,c(4,5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)]
y <- as.matrix(data[,4])
x <- as.matrix(data[ ,c(5,6,7,8,9,13,14,15,16,17,21,22,23,24,25)])
scaledMeans <- colMeans(data.train)
scaledStd <- apply(data.train, 2, sd)
par(mfrow=c(3,5))
plot(ret ~ retLag1, data=data.train)
plot(ret ~ retLag2, data=data.train)
plot(ret ~ retLag3, data=data.train)
plot(ret ~ retLag4, data=data.train)
plot(ret ~ retLag5, data=data.train)
plot(ret ~ vixRetLag1, data=data.train)
plot(ret ~ vixRetLag2, data=data.train)
plot(ret ~ vixRetLag3, data=data.train)
plot(ret ~ vixRetLag4, data=data.train)
plot(ret ~ vixRetLag5, data=data.train)
plot(ret ~ spyRetLag1, data=data.train)
plot(ret ~ spyRetLag2, data=data.train)
plot(ret ~ spyRetLag3, data=data.train)
plot(ret ~ spyRetLag4, data=data.train)
aapl.formula <- ret ~ retLag1 + retLag2 + retLag3 + retLag4 + retLag5 + vixRetLag1 + vixRetLag2 + vixRetLag3 + vixRetLag4 + vixRetLag5 + spyRetLag1 + spyRetLag2 + spyRetLag3 + spyRetLag4 + spyRetLag5
plot(ret ~ spyRetLag5, data=data.train)
train.lm <- lm(aapl.formula, data=data.train)
summary(train.lm)
aapl.resid <- residuals(train.lm)
aapl.fitted <- fitted(train.lm)
par(mfrow=c(3,5))
plot(aapl.resid ~ retLag1, data=data.train)
plot(aapl.resid ~ retLag2, data=data.train)
plot(aapl.resid ~ retLag3, data=data.train)
plot(aapl.resid ~ retLag4, data=data.train)
plot(aapl.resid ~ retLag5, data=data.train)
plot(aapl.resid ~ vixRetLag1, data=data.train)
plot(aapl.resid ~ vixRetLag2, data=data.train)
plot(aapl.resid ~ vixRetLag3, data=data.train)
plot(aapl.resid ~ vixRetLag4, data=data.train)
plot(aapl.resid ~ vixRetLag5, data=data.train)
plot(aapl.resid ~ spyRetLag1, data=data.train)
plot(aapl.resid ~ spyRetLag2, data=data.train)
plot(aapl.resid ~ spyRetLag3, data=data.train)
plot(aapl.resid ~ spyRetLag4, data=data.train)
plot(aapl.resid ~ spyRetLag5, data=data.train)
par(mfrow=c(1,1))
plot(train.lm)
aapl.formula <- ret ~ retLag1 + retLag2 + retLag3 + retLag4 + retLag5 + vixRetLag1 + vixRetLag2 + vixRetLag3 + vixRetLag4 + vixRetLag5 + spyRetLag1 + spyRetLag2 + spyRetLag3 + spyRetLag4 + spyRetLag5
train.lm <- lm(aapl.formula, data=data.train)
summary(train.lm)
aapl.resid <- residuals(train.lm)
aapl.fitted <- fitted(train.lm)
aapl.fitted <- fitted(train.lm)
aapl.fitted <- fitted(train.lm)
par(mfrow=c(3,5))
plot(aapl.resid ~ retLag1, data=data.train)
getwd()
plot(train.lm)
par(mfrow=c(1,1))
plot(train.lm)
anova(train,lm)
anova(train.lm)
coef(summary(train.lm))
predict(train.lm)
head(predict(train.lm))
plot(aapl)
colnames(aapl)
par(mfrow=c(3,5))
plot(ret ~ retLag1, data=data.train)
pairs(ret ~ retLag1 + retLag2)
pairs(ret ~ retLag1 + retLag2, data=data.train)
pairs(ret ~ ., data=data.train)
pairs(ret ~ retLag1+retLag2+retLag3+retLag4, data=data.train)
mean(aapl)
mean(aapl$AdjClose)
library(quantmod)   # get stock prices; useful stock analysis functions
library(xts)        # working with extensible time series
library(rvest)      # web scraping
library(tidyverse)  # ggplot2, purrr, dplyr, tidyr, readr, tibble
library(stringr)    # working with strings
library(forcats)    # working with factors
library(lubridate)  # working with dates in tibbles / data frames
library(plotly)     # Interactive plots
library(corrplot)   # Visuazlize correlation plots
getSymbols("MA", from = "2007-01-01", to = "2016-10-23")
MA %>% class()
MA %>% str()
MA %>% head()
MA %>%
Ad() %>%       # adjust prices
chartSeries()
getSymbols("AAPL", from = "2007-01-01", to = "2016-10-23")
MA %>% class()
MA %>% str()
MA %>% head()
MA %>%
Ad() %>%       # adjust prices
chartSeries()
getSymbols("AAPL", from = "2007-01-01", to = "2016-10-23")
MA %>% class()
MA %>% str()
getSymbols("AAPL", from = "2007-01-01", to = "2016-10-23")
AAPL %>% class()
AAPL %>% str()
AAPL %>% head()
AAPL %>%
Ad() %>%       # adjust prices
chartSeries()
getSymbols("AAPL", from = "2009-01-01", to = "2017-12-07")
AAPL %>% class()
AAPL %>% str()
AAPL %>% head()
AAPL %>%
Ad() %>%       # adjust prices
chartSeries()
MA %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2016',
theme="black"
)
AAPL %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2016',
theme="black"
)
AAPL %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2016',
theme="white"
)
AAPL %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2017',
theme="white"
)
AAPL %>%
Ad() %>%
dailyReturn(type = 'log') %>%
head()
AAPL_log_returns <- AAPL %>%
Ad() %>%
dailyReturn(type = "log")
names(AAPL_log_returns) <- "AAPL.Log.Returns"
AAPL_log_returns %>%
ggplot(aes(x = AAPL.Log.Returns)) +
geom_histogram(bins = 100) +
geom_density() +
geom_rug(alpha = 0.5)
probs <- c(.005, .025, .25, .5, .75, .975, .995)
dist_log_returns <- AAPL_log_returns %>%
quantile(probs = probs, na.rm = TRUE)
dist_log_returns
mean_log_returns <- mean(AAPL_log_returns, na.rm = TRUE)
sd_log_returns <- sd(AAPL_log_returns, na.rm = TRUE)
mean_log_returns %>% exp()
require(lmtest)
dwtest(train.lm)
anova(train.lm)
AAPL %>%
chartSeries(TA='addBBands();
addBBands(draw="p");
addVo();
addMACD()',
subset='2017',
theme="white"
)
AAPL %>%
Ad() %>%
dailyReturn(type = 'log') %>%
head()
AAPL_log_returns <- AAPL %>%
Ad() %>%
dailyReturn(type = "log")
names(AAPL_log_returns) <- "AAPL.Log.Returns"
AAPL_log_returns %>%
ggplot(aes(x = AAPL.Log.Returns)) +
geom_histogram(bins = 100) +
geom_density() +
geom_rug(alpha = 0.5)
